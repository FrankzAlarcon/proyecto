/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import sources.AlgoritmoMatch;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author dell
 */
public class JFPantalla extends javax.swing.JFrame {

    /**
     * Creates new form JFPantalla
     */
    public JFPantalla() {
        initComponents();
        this.setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTPIngresar = new javax.swing.JTabbedPane();
        jPIngresarTexto = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAIngresarTexto = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPIngresarArchivo = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jBSeleccionarArchivo = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTAArchivo = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jCBFuerzaBruta = new javax.swing.JCheckBox();
        jCBKMP = new javax.swing.JCheckBox();
        jCBBoyerMoore = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTAPatronesABuscar = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jBBuscar = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTAResumenResultados = new javax.swing.JTextArea();
        jTPMostarResultados = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTAFuerzaBruta = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTA_KMP = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTABoyerMoore = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTPIngresar.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTAIngresarTexto.setColumns(20);
        jTAIngresarTexto.setRows(5);
        jScrollPane1.setViewportView(jTAIngresarTexto);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Porfavor Ingrese el Texto de la búsqueda: ");

        javax.swing.GroupLayout jPIngresarTextoLayout = new javax.swing.GroupLayout(jPIngresarTexto);
        jPIngresarTexto.setLayout(jPIngresarTextoLayout);
        jPIngresarTextoLayout.setHorizontalGroup(
            jPIngresarTextoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPIngresarTextoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPIngresarTextoLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel1)
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPIngresarTextoLayout.setVerticalGroup(
            jPIngresarTextoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPIngresarTextoLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        jTPIngresar.addTab("Ingresar Texto", jPIngresarTexto);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Porfavor Seleccione el Archivo de texto plano de la búsqueda: ");

        jBSeleccionarArchivo.setText("Seleccionar");
        jBSeleccionarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSeleccionarArchivoActionPerformed(evt);
            }
        });

        jTAArchivo.setColumns(20);
        jTAArchivo.setRows(5);
        jTAArchivo.setEnabled(false);
        jScrollPane3.setViewportView(jTAArchivo);

        javax.swing.GroupLayout jPIngresarArchivoLayout = new javax.swing.GroupLayout(jPIngresarArchivo);
        jPIngresarArchivo.setLayout(jPIngresarArchivoLayout);
        jPIngresarArchivoLayout.setHorizontalGroup(
            jPIngresarArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPIngresarArchivoLayout.createSequentialGroup()
                .addGroup(jPIngresarArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPIngresarArchivoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3))
                    .addGroup(jPIngresarArchivoLayout.createSequentialGroup()
                        .addGroup(jPIngresarArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPIngresarArchivoLayout.createSequentialGroup()
                                .addGap(135, 135, 135)
                                .addComponent(jBSeleccionarArchivo))
                            .addGroup(jPIngresarArchivoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)))
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPIngresarArchivoLayout.setVerticalGroup(
            jPIngresarArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPIngresarArchivoLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBSeleccionarArchivo)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTPIngresar.addTab("Ingresar Archivo", jPIngresarArchivo);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jCBFuerzaBruta.setText("Fuerza Bruta");
        jCBFuerzaBruta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBFuerzaBrutaActionPerformed(evt);
            }
        });

        jCBKMP.setText("KMP");

        jCBBoyerMoore.setText("Boyer Moore");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCBFuerzaBruta)
                    .addComponent(jCBKMP)
                    .addComponent(jCBBoyerMoore))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCBFuerzaBruta)
                .addGap(18, 18, 18)
                .addComponent(jCBKMP)
                .addGap(18, 18, 18)
                .addComponent(jCBBoyerMoore)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTAPatronesABuscar.setColumns(20);
        jTAPatronesABuscar.setRows(5);
        jScrollPane4.setViewportView(jTAPatronesABuscar);

        jLabel6.setText("Ingrese Patron(es)");

        jLabel7.setText("(Un patrón por linea)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(0, 126, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Resultados");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Algortimos");

        jBBuscar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBBuscar.setText("BUSCAR");
        jBBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarActionPerformed(evt);
            }
        });

        jTAResumenResultados.setColumns(20);
        jTAResumenResultados.setRows(5);
        jScrollPane5.setViewportView(jTAResumenResultados);

        jTAFuerzaBruta.setColumns(20);
        jTAFuerzaBruta.setRows(5);
        jScrollPane2.setViewportView(jTAFuerzaBruta);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTPMostarResultados.addTab("FB", jPanel3);

        jTA_KMP.setColumns(20);
        jTA_KMP.setRows(5);
        jScrollPane6.setViewportView(jTA_KMP);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTPMostarResultados.addTab("KMP", jPanel4);

        jTABoyerMoore.setColumns(20);
        jTABoyerMoore.setRows(5);
        jScrollPane7.setViewportView(jTABoyerMoore);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTPMostarResultados.addTab("BM", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jTPIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(163, 163, 163)
                                .addComponent(jBBuscar)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTPMostarResultados)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(129, 129, 129))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(jBBuscar)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTPIngresar)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTPMostarResultados, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSeleccionarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSeleccionarArchivoActionPerformed
        JFileChooser fc = new JFileChooser(); //Declaramos objeto para escoger archivos de nuestro almacenamiento
        fc.showOpenDialog(null); //Abrimos un menu para seleccionar
        File archivo = fc.getSelectedFile();
        try {
            FileReader fr = new FileReader(archivo);
            BufferedReader br = new BufferedReader(fr);
            String texto = "";
            String linea = "";
            while (((linea = br.readLine()) != null)) {
                texto += linea + "\n";
            }
            this.jTAArchivo.setText(texto);
            JOptionPane.showMessageDialog(null, "Archivo leido correctamente");
        } catch (Exception e) {
            System.out.println("No se ha accesido al archivo");
        }
    }//GEN-LAST:event_jBSeleccionarArchivoActionPerformed

    private void jCBFuerzaBrutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBFuerzaBrutaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBFuerzaBrutaActionPerformed
    //Buscar elementos
    private void jBBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarActionPerformed
        try {
            limpiarTextArea();
            if (!jTAPatronesABuscar.getText().isBlank()) {
                //si existen patrones a buscar
                String[] patrones = jTAPatronesABuscar.getText().toLowerCase().split("\n");
                String[] lineas = null;
                if (jTPIngresar.getSelectedIndex() == 0) {
                    //si se ingresa texto por teclado
                    lineas = jTAIngresarTexto.getText().toLowerCase().split("\n");
                } else if (jTPIngresar.getSelectedIndex() == 1) {
                    //si se ingresa un archivo externo
                    lineas = jTAArchivo.getText().toLowerCase().split("\n");
                }
                ArrayList<Long> tiemposXpatronesFB = new ArrayList<>();
                ArrayList<Long> tiemposXpatronesKMP = new ArrayList<>();
                ArrayList<Long> tiemposXpatronesBM = new ArrayList<>();
                
                if (jCBFuerzaBruta.isSelected()) {
                    //Si se desea buscar por algoritmo de Fuerza bruta
                    jTAFuerzaBruta.setText(jTAFuerzaBruta.getText() + "Algoritmo Fuerza Bruta\n");
                    long tiempoTotal = 0;
                    for (String patron : patrones) {
                        //Realiza la busqueda de cada patron
                        String resultadosBF = "";
                        int numeroLinea = 0;
                        long tiempoInicialPorPatron = System.nanoTime();
                        for (String linea : lineas) {
                            //Realiza la busqueda de un patron por fuerza bruta en cada linea.
                            numeroLinea++;
                            long tiempoInicial = System.nanoTime();
                            resultadosBF += AlgoritmoMatch.bruteForceManyMatches(linea, patron, numeroLinea);
                            tiempoTotal += System.nanoTime() - tiempoInicial;
                        }
                        //Añade el tiempo por patron del algoritmo Fuerza Bruta
                        tiemposXpatronesFB.add(System.nanoTime() - tiempoInicialPorPatron);
                        //Separa los resultados en lineas separadas
                        String coincidencias[] = resultadosBF.split("\n");
                        int numeroCoincidencia = 0;
                        jTAFuerzaBruta.setText(jTAFuerzaBruta.getText() + "Patron: " + patron + "\n");
                        for (String coincidencia : coincidencias) {
                            //Imprime los resultados de la manera correcta
                            numeroCoincidencia++;
                            jTAFuerzaBruta.setText(jTAFuerzaBruta.getText() + "Coincidencia " + numeroCoincidencia + coincidencia + "\n");
                        }
                    }
                    //Muestra el tiempo total de la busqueda
                    jTAResumenResultados.setText(jTAResumenResultados.getText() + "Fuerza Bruta Tiempo total: " + tiempoTotal / 1e6 + "ms\n");
                }
                if (jCBKMP.isSelected()) {
                    //Si se busca por KMP
                    jTA_KMP.setText(jTA_KMP.getText() + "Algoritmo KMP\n");
                    long tiempoTotal = 0;
                    for (String patron : patrones) {
                        //Se realiza la busqueda por patron
                        String resultadosKMP = "";
                        int numeroLinea = 0;
                        long tiempoInicialPorPatron = System.nanoTime();
                        for (String linea : lineas) {
                            //Se realiza la busqueda de un patron en cada linea por KMP
                            numeroLinea++;
                            long tiempoInicial = System.nanoTime();
                            resultadosKMP += AlgoritmoMatch.KMPmatcher(linea, patron, numeroLinea);
                            tiempoTotal += System.nanoTime() - tiempoInicial;//Se realiza el calculo del tiempo
                        }
                        //Añade el tiempo por patron del algoritmo KMP
                        tiemposXpatronesKMP.add(System.nanoTime() - tiempoInicialPorPatron);
                        //Separa los resultados en lineas separadas
                        String coincidencias[] = resultadosKMP.split("\n");
                        int numeroCoincidencia = 0;
                        jTA_KMP.setText(jTA_KMP.getText() + "Patron: " + patron + "\n");
                        for (String coincidencia : coincidencias) {
                            //Muestra los resultados en el formato deseado
                            numeroCoincidencia++;
                            jTA_KMP.setText(jTA_KMP.getText() + "Coincidencia " + numeroCoincidencia + coincidencia + "\n");
                        }
                    }
                    //Muestra el tiempo total de la busqueda
                    jTAResumenResultados.setText(jTAResumenResultados.getText() + "KMP Tiempo total: " + tiempoTotal / 1e6 + "ms\n");
                }
                if (jCBBoyerMoore.isSelected()) {
                    //Si se selecciona el algoritmo BoyerMoore
                    jTABoyerMoore.setText(jTABoyerMoore.getText() + "Algoritmo Boyer Moore\n");
                    long tiempoTotal = 0;
                    for (String patron : patrones) {
                        //Realiza las busquedas de todos los patrones
                        String resultadosBM = "";
                        int numeroLinea = 0;
                        long tiempoInicialPorPatron = System.nanoTime();
                        for (String linea : lineas) {
                            //Realiza las busquedas del patron por algoritmo BooyerMoore
                            numeroLinea++;
                            long tiempoInicial = System.nanoTime();
                            resultadosBM += AlgoritmoMatch.BoyerMooreManyMatches(linea, patron, numeroLinea);
                            tiempoTotal += System.nanoTime() - tiempoInicial;//Realiza el calculo del tiempo total
                        }
                        //Añade el tiempo por patron del algoritmo BM
                        tiemposXpatronesBM.add(System.nanoTime() - tiempoInicialPorPatron);
                        //Separa los resultados en lineas separadas
                        String coincidencias[] = resultadosBM.split("\n");
                        int numeroCoincidencia = 0;
                        jTABoyerMoore.setText(jTABoyerMoore.getText() + "Patron: " + patron + "\n");
                        for (String coincidencia : coincidencias) {
                            //Muestra los resultados en el formato deseado
                            numeroCoincidencia++;
                            jTABoyerMoore.setText(jTABoyerMoore.getText() + "Coincidencia " + numeroCoincidencia + coincidencia + "\n");
                        }
                    }
                    //Muestra el tiempo total de la busqueda
                    jTAResumenResultados.setText(jTAResumenResultados.getText() + "BM Tiempo total: " + tiempoTotal / 1e6 + "ms\n");
                }
                //Muestra los mejores algoritmos por patron
                mostrarMejorAlgoritmoPorPatron(tiemposXpatronesFB, tiemposXpatronesKMP, tiemposXpatronesBM, patrones);
                if(!jCBFuerzaBruta.isSelected() && !jCBKMP.isSelected() && !jCBBoyerMoore.isSelected()) {
                    //Si no se ha seleccionado ningun algoritmo de busqueda
                    JOptionPane.showMessageDialog(rootPane, "Seleccione un algoritmo de busqueda");
                }
                
            } else {
                //Si no se han ingresado patrones a buscar
                JOptionPane.showMessageDialog(rootPane, "Ingrese los patrones a buscar");
            }
        } catch (Exception e) {
            //Error
            JOptionPane.showMessageDialog(rootPane, "A ocurrido un error, cargue nuevamente los datos o intente con otro archivo.");
        }
    }//GEN-LAST:event_jBBuscarActionPerformed
    //Limpia los text areas de los resultados
    private void limpiarTextArea() {
        jTAFuerzaBruta.setText(null);
        jTABoyerMoore.setText(null);
        jTA_KMP.setText(null);
        jTAResumenResultados.setText(null);
    }
    
    private void mostrarMejorAlgoritmoPorPatron(ArrayList<Long> tiemposXpatronesFB, ArrayList<Long> tiemposXpatronesKMP, ArrayList<Long> tiemposXpatronesBM, String[] patrones) {
        if(tiemposXpatronesBM.isEmpty() && tiemposXpatronesFB.isEmpty() && tiemposXpatronesKMP.isEmpty()) {
            //Si no existe ningun tiempos por patrones no hace nada
           
        } else if (!tiemposXpatronesFB.isEmpty() && !tiemposXpatronesKMP.isEmpty() && tiemposXpatronesBM.isEmpty()){
            //Si se seleccionó Fuerza bruta y KMP
            for (int i = 0; i < tiemposXpatronesFB.size(); i++) {
                //Se repite por cada patron
                if(tiemposXpatronesFB.get(i) <= tiemposXpatronesKMP.get(i)) {
                    //Si la busqueda por Fuerza bruta fue mejor que por KMP
                    jTAResumenResultados.setText(jTAResumenResultados.getText() + "Para el patron " + patrones[i] + " el mejor algortimo fue Fuerza bruta con " + tiemposXpatronesFB.get(i)/1e6 + "ms\n");
                } else {
                    //Si la busqueda por KMP fue mejor que por Fuerza Bruta
                    jTAResumenResultados.setText(jTAResumenResultados.getText() + "Para el patron " + patrones[i] + " el mejor algortimo fue KMP con " + tiemposXpatronesKMP.get(i)/1e6 + "ms\n");
                }                
            }
        } else if (!tiemposXpatronesFB.isEmpty() && !tiemposXpatronesBM.isEmpty() && tiemposXpatronesKMP.isEmpty()) {
            //Si se seleccionó Fuerza bruta y BM
            for (int i = 0; i < tiemposXpatronesFB.size(); i++) {
                //Se repite por cada patron
                if(tiemposXpatronesFB.get(i) <= tiemposXpatronesBM.get(i)) {
                    //Si la busqueda por Fuerza bruta fue mejor que por BM
                    jTAResumenResultados.setText(jTAResumenResultados.getText() + "Para el patron " + patrones[i] + " el mejor algortimo fue Fuerza bruta con " + tiemposXpatronesFB.get(i)/1e6 + "ms\n");
                } else {
                    //Si la busqueda por BM fue mejor que por Fuerza Bruta
                    jTAResumenResultados.setText(jTAResumenResultados.getText() + "Para el patron " + patrones[i] + " el mejor algortimo fue BM con " + tiemposXpatronesBM.get(i)/1e6 + "ms\n");
                }                
            }            
        } else if (!tiemposXpatronesBM.isEmpty() && !tiemposXpatronesKMP.isEmpty() && tiemposXpatronesFB.isEmpty()) {
            //Si se seleccionó BM y KMP
            for (int i = 0; i < tiemposXpatronesKMP.size(); i++) {
                //Se repite por cada patron
                if(tiemposXpatronesBM.get(i) <= tiemposXpatronesKMP.get(i)) {
                    //Si la busqueda por BoyerMoore fue mejor que por KMP
                    jTAResumenResultados.setText(jTAResumenResultados.getText() + "Para el patron " + patrones[i] + " el mejor algortimo fue BooyerMoore con " + tiemposXpatronesBM.get(i)/1e6 + "ms\n");
                } else {
                    //Si la busqueda por KMP fue mejor que por BoyerMoore
                    jTAResumenResultados.setText(jTAResumenResultados.getText() + "Para el patron " + patrones[i] + " el mejor algortimo fue KMP con " + tiemposXpatronesKMP.get(i)/1e6 + "ms\n");
                }                
            }            
        } else if (!tiemposXpatronesFB.isEmpty() && !tiemposXpatronesKMP.isEmpty() && !tiemposXpatronesBM.isEmpty()) {
            //Si se seleccionaron los 3 algorimos
            for (int i = 0; i < tiemposXpatronesKMP.size(); i++) {
                //Se repite por cada patron
                if(tiemposXpatronesFB.get(i) <= tiemposXpatronesKMP.get(i) && tiemposXpatronesFB.get(i) <= tiemposXpatronesBM.get(i)) {
                    //Si la busqueda por Fuerza fue mejor que las demas
                    jTAResumenResultados.setText(jTAResumenResultados.getText() + "Para el patron " + patrones[i] + " el mejor algortimo fue Fuerza Bruta con " + tiemposXpatronesFB.get(i)/1e6 + "ms\n");
                } else if (tiemposXpatronesKMP.get(i) <= tiemposXpatronesFB.get(i) && tiemposXpatronesKMP.get(i) <= tiemposXpatronesBM.get(i)) {
                    //Si la busqueda por KMP fue mejor que las demas
                    jTAResumenResultados.setText(jTAResumenResultados.getText() + "Para el patron " + patrones[i] + " el mejor algortimo fue KMP con " + tiemposXpatronesKMP.get(i)/1e6 + "ms\n");
                } else if (tiemposXpatronesBM.get(i) <= tiemposXpatronesKMP.get(i) && tiemposXpatronesBM.get(i) <= tiemposXpatronesFB.get(i)) {
                    //Si la busqueda por BM fue mejor que las demas
                    jTAResumenResultados.setText(jTAResumenResultados.getText() + "Para el patron " + patrones[i] + " el mejor algortimo fue BM con " + tiemposXpatronesBM.get(i)/1e6 + "ms\n");
                }             
            }             
        } else {
            //Si se seleccionó solo un algoritmo, no hace nada
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFPantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFPantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFPantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFPantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFPantalla().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBuscar;
    private javax.swing.JButton jBSeleccionarArchivo;
    private javax.swing.JCheckBox jCBBoyerMoore;
    private javax.swing.JCheckBox jCBFuerzaBruta;
    private javax.swing.JCheckBox jCBKMP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPIngresarArchivo;
    private javax.swing.JPanel jPIngresarTexto;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTAArchivo;
    private javax.swing.JTextArea jTABoyerMoore;
    private javax.swing.JTextArea jTAFuerzaBruta;
    private javax.swing.JTextArea jTAIngresarTexto;
    private javax.swing.JTextArea jTAPatronesABuscar;
    private javax.swing.JTextArea jTAResumenResultados;
    private javax.swing.JTextArea jTA_KMP;
    private javax.swing.JTabbedPane jTPIngresar;
    private javax.swing.JTabbedPane jTPMostarResultados;
    // End of variables declaration//GEN-END:variables
}
